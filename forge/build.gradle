architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    clientOnlyMinecraftJar()

    forge {
        mixinConfigs = ["mixins.indicatia.json", "mixins.indicatia_forge.json"]
    }

    runs {
        client {
            vmArg("-Dmixin.debug.export=true")
            vmArg("-Dmixin.hotSwap=true")

            if (project.hasProperty("devauth_dir")) {
                vmArg("-Ddevauth.configDir=${devauth_dir}")
            }
        }
    }

    mixin {
        defaultRefmapName = "mixins.indicatia_forge.refmap.json"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${mc_version}-${forge_version}"

    modRuntimeOnly "curse.maven:configured-457570:${configured_version}"
    modRuntimeOnly "curse.maven:catalogue-459701:${catalogue_version}"
    modRuntimeOnly "me.djtheredstoner:DevAuth-forge-latest:${devauth_version}"
    modImplementation "me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
    inputs.property "version", rootProject.mod_version

    filesMatching("META-INF/mods.toml") {
        expand "version": rootProject.mod_version
    }
}

String fileName = "${archives_base_name}-mc${mc_version}"

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    commonSources.exclude ".cache"
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    from commonSources.archiveFile.map { zipTree(it) }
}

remapSourcesJar {
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

def uploadDebug = true

curseforge {
    apiKey = project.hasProperty("curseforge_api_token") ? project.curseforge_api_token : ""
    project {
        id = "272146"
        changelog = rootProject.file("CHANGE_LOG.md")
        changelogType = "markdown"
        releaseType = "release"
        addGameVersion "Forge"
        addGameVersion "Java 17"
        addGameVersion project.mc_version

        mainArtifact(remapJar.archiveFile) {
            displayName = "[Forge] " + fileName + "-v${mod_version}"
        }
        relations {
            requiredDependency "cloth-config"
            optionalDependency "configured"
        }
        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
        addArtifact shadowJar
        addArtifact remapSourcesJar
    }
    options {
        debug uploadDebug
        forgeGradleIntegration = false
    }
}

modrinth {
    debugMode = uploadDebug
    token = project.hasProperty("modrinth_api_token") ? project.modrinth_api_token : ""
    projectId = "indicatia"
    changelog = rootProject.file("CHANGE_LOG.md").text
    versionName = "[Forge] Indicatia " + "v${mod_version}" + " for Minecraft " + project.mc_version
    versionNumber = project.mod_version + "-forge"
    versionType = "release"
    uploadFile = remapJar
    additionalFiles = [shadowJar, remapSourcesJar]
    gameVersions = ["${mc_version}"]
    loaders = ["forge"]
    dependencies {
        required.project "cloth-config"
        // optional.project "configured" TODO Enable when "Configured" mod is on Modrinth, Thank you Emmaffle!
    }
}
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "com.github.johnrengelman.shadow" version "8.1.1" apply false
    id "dev.architectury.loom" version "1.2-SNAPSHOT" apply false
    id "io.github.CDAGaming.cursegradle" version "1.6.1" apply false
    id "com.modrinth.minotaur" version "2.+" apply false
    id "io.github.juuxel.loom-quiltflower" version "1.10.0" apply false
}

architectury {
    minecraft = project.mc_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "com.matthewprenger.cursegradle"
    apply plugin: "com.modrinth.minotaur"
    apply plugin: "io.github.juuxel.loom-quiltflower"

    loom {
        silentMojangMappingsLicense()
    }

    quiltflower {
        quiltflowerVersion = "1.9.0"
    }

    repositories {
        maven {
            name "ParchmentMC"
            url "https://maven.parchmentmc.org"
            content {
                includeGroup "org.parchmentmc.data"
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${mc_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${parchmentmc_version}@zip")
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"

    archivesBaseName = project.archives_base_name
    version = project.mod_version
    group = project.maven_group

    repositories {
        maven {
            name "CurseMaven"
            url "https://www.cursemaven.com/"
            content {
                includeGroup "curse.maven"
            }
        }
        maven {
            name "DevAuth"
            url "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1"
        }
    }

    tasks.withType(JavaCompile).tap {
        configureEach {
            options.encoding = "UTF-8"
            options.release = 17
        }
    }

    java {
        withSourcesJar()
    }
}

tasks.register("curseforgeModrinthFabric") {
    group "publishing"
    dependsOn ":fabric:modrinth"
    dependsOn ":fabric:curseforge"
}

tasks.register("curseforgeModrinthForge") {
    group "publishing"
    dependsOn ":forge:modrinth"
    dependsOn ":forge:curseforge"
}

if (project.hasProperty("version_lib_dir")) {
    tasks.register("updateVersionLib") {
        group "publishing"
        def versionFile = file("${version_lib_dir}/indicatia_version.json")
        def jsonBuilder = new JsonBuilder(new JsonSlurper().parseText(versionFile.text))
        def jsonElement = jsonBuilder.content
        def formattedList = []

        jsonElement.promos."${mc_version}-latest" = project.mod_version
        jsonElement.promos."${mc_version}-recommended" = project.mod_version

        def reader = new BufferedReader(new FileReader(rootProject.file("CHANGE_LOG.md")))
        def currentLine
        for (int lineIndex = 0; (currentLine = reader.readLine()) != null; lineIndex++) {
            if (lineIndex >= 2) {
                formattedList.add(currentLine)
            }
        }

        if (jsonElement."${mc_version}" == null) {
            jsonElement."${mc_version}" = new JsonSlurper().parseText("{ \"${mod_version}\": \"\"}")
        }
        jsonElement."${mc_version}"."${mod_version}" = formattedList.join("\n")
        versionFile.text = jsonBuilder.toPrettyString()
    }
}